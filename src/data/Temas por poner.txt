---------- HTMl -------------
📁 data
 ┗ 📁 html
    ┣ 📄 fundamentos.ts XXXXXX
    ┣ 📄 Etiquetas de texto y formato.ts XXXXXXX
    ┣ 📄 Listas.ts XXXXXXX
    ┣ 📄 Enlaces.ts XXXXXXX AQUI HAY QUE HACER QUE SEA INTUITIVO
    ┣ 📄 Imágenes y multimedia.ts XXXXXXX
    ┣ 📄 Tablas.ts XXXXXXX
    ┣ 📄 Formularios y entradas.ts XXXXXXX
    ┣ 📄 Elementos semánticos.ts XXXXXXX
    ┣ 📄 Etiquetas de contenedor genéricas.ts XXXXXXX 
    ┣ 📄 Entidades y símbolos.ts XXXXXXX -----------------------------------------------
    ┣ 📄 Atributos globales y específicos.ts XXXXXXX
    ┣ 📄 Etiquetas útiles menores / formateo.ts XXXXXXX
    ┣ 📄 Otros elementos útiles.ts
    ┣ 📄 Comentarios y metadatos.ts XXXXXXX

---------- CSS -------------
📁 data
 ┗ 📁 css
    ┣ 📄 selectores-especificidad-cascada.ts              
    ┣ 📄 modelo-de-caja.ts                                 
    ┣ 📄 unidades-y-medidas.ts                             
    ┣ 📄 tipografia-y-colores.ts                           
    ┣ 📄 layout-basico.ts                                  
    ┣ 📄 flexbox.ts                                        
    ┣ 📄 grid.ts                                           
    ┣ 📄 position-y-zindex.ts                              
    ┣ 📄 responsive-mediaqueries.ts                        
    ┣ 📄 variables-css.ts                                  
    ┣ 📄 transiciones-y-animaciones.ts                     
    ┣ 📄 pseudoclases-y-pseudoelementos.ts                 
    ┣ 📄 sombras-degradados-transformaciones.ts            
    ┣ 📄 buenas-practicas-frameworks.ts                    (Tailwind, BEM, etc.)

---------- JavaScript -------------
📁 data
 ┗ 📁 javascript
    ┣ 📄 introduccion.ts
    ┣ 📄 variables-constantes.ts
    ┣ 📄 tipos-de-datos.ts
    ┣ 📄 operadores.ts
    ┣ 📄 estructuras-de-control.ts
    ┣ 📄 funciones.ts
    ┣ 📄 arrays.ts
    ┣ 📄 objetos.ts
    ┣ 📄 bucles.ts
    ┣ 📄 manejo-del-dom.ts
    ┣ 📄 eventos.ts
    ┣ 📄 temporizadores.ts
    ┣ 📄 json-y-storage.ts
    ┣ 📄 scope-hoisting.ts
    ┣ 📄 this-contexto.ts
    ┣ 📄 funciones-callback-arrow.ts
    ┣ 📄 promesas-y-asyncawait.ts
    ┣ 📄 errores-trycatch.ts
    ┣ 📄 buenas-practicas.ts


✅ Estado actual de subtemas cubiertos
Subtema	Estado	Incluye
✅ Estructura básica del documento	OK	<!DOCTYPE html>, <html>, <head>, <body>, <meta>, <title>
✅ Etiquetas de texto y formato	OK	<h1>–<h6>, <p>, <!-- -->
✅ Listas	OK	<ul>, <ol>, <li>, <dl>, <dt>, <dd>

1. Principales subtemas de HTML

Basado en fuentes como Siberoloji, GeeksforGeeks y MDN, estos son los bloques clave que suelen cubrirse en "Fundamentos de HTML":

Estructura básica del documento

<!DOCTYPE html>, <html>, <head>, <meta>, <title>, <body> 
siberoloji.com
GeeksforGeeks

Etiquetas de texto y formato

Encabezados (<h1>–<h6>), párrafos (<p>), comentarios (<!-- -->) 
siberoloji.com
GeeksforGeeks

Listas

Ordenadas (<ol>), no ordenadas (<ul>), ítems (<li>), listas de descripción (<dl>, <dt>, <dd>) 
GeeksforGeeks
atofcode.blogspot.com

Enlaces

<a> con href, enlaces relativos y absolutos, target="_blank" 
siberoloji.com
atofcode.blogspot.com

Imágenes y multimedia

<img> con src, alt, title, tamaño; <video>, <audio> 
siberoloji.com
atofcode.blogspot.com

Tablas

<table>, <tr>, <td>, <th>, colspan, rowspan, <caption> 
siberoloji.com
atofcode.blogspot.com

Formularios y entradas

<form>, <input> (text, password, email...), <textarea>, <select>, <option>, atributos action, method, validación 
siberoloji.com
atofcode.blogspot.com

Elementos semánticos

<header>, <nav>, <section>, <article>, <aside>, <footer>, <main> 
siberoloji.com
atofcode.blogspot.com

Etiquetas de contenedor genéricas

<div> y <span> para estructurar contenido 
Evolved Designs

Entidades y símbolos

&lt;, &gt;, &amp;, &copy;... 
siberoloji.com

Atributos globales y específicos

class, id, style, src, alt, href, data-*, aria-* 
siberoloji.com
Evolved Designs

Etiquetas útiles menores / formateo

<strong>, <em>, <b>, <i>, <mark>, <small>, <sub>, <sup>, <del>, <ins> 
ktnest.com
Reddit

Otros elementos útiles

<iframe>, <canvas>, <progress>, <details>, <summary> 
Evolved Designs
Reddit

Comentarios y metadatos

Comentarios HTML, meta tags para charset, viewport, SEO básico (description, author) 
Reddit
siberoloji.com



🏰 Palacio de TypeScript 🏰 Piso 2 – TypeScript: Interfaces y Funciones Tipadas
✅ Preguntas Teóricas
¿Qué es una interface en TypeScript y para qué sirve? Una interface es similar al type solamente que esta le das las reglas que debe seguir por ejmplo que propiedades debe tener un objeto de lo contrario dara error
¿Cuál es la diferencia entre interface y type alias? ¿En qué casos conviene usar una u otra? el type es más flexible y es mas abiero mientras que la interface es más a objetos, una se puede heredar y otra no, 
Explica qué significa la palabra clave readonly en una interface o en un type. Se refiere a que no se puede modificar la propiedad
¿Qué son las propiedades opcionales en una interface y cómo se definen? Son unas propiedades especiales que son opcionales a la hora de usar un bjeto
¿Cómo se tipan correctamente las funciones en TypeScript (parámetros y valor de retorno)?function saludarEsposa(esposa: string): string {}
¿Qué diferencia hay entre un parámetro opcional y un parámetro con valor por defecto en una función de TypeScript?Al igual que los parametros normales en una type o interface son opcionales pueden ir o no y cuando le pones el defecto si no masndas el argumento tomara la funcion el parametro por defecto como valor
✅ Preguntas Prácticas
Define una interface llamada Phantom con las propiedades: id: number, nombre: string, habilidad: string, y  una propiedad opcional activo: boolean. interface Phantom { id: number, nombre: string, habilidad: string, action?: boolean}
Declara una constante makoto de tipo Phantom con datos de ejemplo.const makoto: Phantom = { id: 1, nombre: 'Makoto niijima', habilidad: 'Mediaraha', activo: true }
Declara una interface llamada Persona con nombre: string y una propiedad readonly id: number. interface Persona [ nombre. string, readonly id: number ]
Crea una función llamada saludar que reciba un nombre: string y devuelva un string con el saludo "Hola, {nombre}". function saludarEsposa(nombre: string): string { return `Hola, te amo ${nombre}` }
Crea una función llamada suma que reciba dos parámetros de tipo number, el segundo debe ser opcional. Si no se pasa, que sume solo el primero. function suma(h:number, m?:number): number { return  m !== undefined ? a + b : a }
Crea una función llamada multiplicar que reciba dos parámetros de tipo number, pero el segundo debe tener un valor por defecto de 2. function multiplicar(s:number, k: number = 5) { return s * k }



rogersanchezaltamirano@gmail.com
Cruzazul17!