'use client'

import {
  BookOpenCheck,
  FileCode2,
  CircleDot,
  Timer,
  Braces,
  Binary,
  Shuffle,
  Repeat,
  Divide,
  MoveRight,
  ScanSearch,
  Settings2,
  ListOrdered,
  CodeSquare,
  CircleDashed,
  PanelRight,
  Rocket,
  Layers,
} from 'lucide-react'

export const subTopicsJs = [
  {
    name: 'Fundamentos de JavaScript',
    description: 'Qu√© es JS, para qu√© sirve, historia y evoluci√≥n',
    icono: <BookOpenCheck size={30} className='text-MAzul' />,
    route: 'fundaments'
  },
  {
    name: 'Sintaxis y declaraciones de variables b√°sicas',
    description: 'Variables, constantes, comentarios, tipos de datos',
    icono: <FileCode2 size={30} className='text-MAzul' />,
    route: 'variables'
  },
  {
    name: 'Tipos de datos y coerci√≥n',
    description: 'Primitivos, objetos, typeof, coerci√≥n impl√≠cita/explicita',
    icono: <Binary size={30} className='text-MAzul' />,
    route: 'dataTypesCoercion'
  },
  {
    name: 'Operadores',
    description: 'Aritm√©ticos, l√≥gicos, comparaci√≥n, asignaci√≥n y m√°s',
    icono: <Divide size={30} className='text-MAzul' />,
    route: 'operators'
  },
  {
    name: 'Estructuras de control',
    description: 'Condicionales (if, else, switch), bucles (for, while, do-while)',
    icono: <Repeat size={30} className='text-MAzul' />,
    route: 'controlStructures'
  },
  {
    name: 'Funciones',
    description: 'Declarativas, expresivas, flecha, callbacks y par√°metros',
    icono: <Braces size={30} className='text-MAzul' />,
    route: 'functions'
  },
  {
    name: '√Åmbito y hoisting',
    description: 'Scope, var vs let/const, hoisting, temporal dead zone',
    icono: <MoveRight size={30} className='text-MAzul' />,
    route: 'scopeHoisting'
  },
  {
    name: 'Arreglos',
    description: 'M√©todos, iteraciones, mutabilidad, destructuring',
    icono: <ListOrdered size={30} className='text-MAzul' />,
    route: 'arrays'
  },
  {
    name: 'Objetos',
    description: 'Creaci√≥n, acceso, m√©todos, this, clases y prototipos',
    icono: <CircleDashed size={30} className='text-MAzul' />,
    route: 'objects'
  },
  {
    name: 'Desestructuraci√≥n y spread/rest',
    description: 'Extraer y combinar datos de objetos y arrays',
    icono: <CircleDot size={30} className='text-MAzul' />,
    route: 'destructuringSpread'
  },
  {
    name: 'Funciones de orden superior',
    description: 'map, filter, reduce, forEach, find y m√°s',
    icono: <Shuffle size={30} className='text-MAzul' />,
    route: 'higherOrderFunctions'
  },
  {
    name: 'Eventos en JavaScript',
    description: 'Listeners, propagaci√≥n, preventDefault, delegation',
    icono: <Settings2 size={30} className='text-MAzul' />,
    route: 'events'
  },
  {
    name: 'Manipulaci√≥n del DOM',
    description: 'Seleccionar, crear, modificar y eliminar elementos',
    icono: <CodeSquare size={30} className='text-MAzul' />,
    route: 'domManipulation'
  },
  {
    name: 'Temporizadores',
    description: 'setTimeout, setInterval, clearInterval',
    icono: <Timer size={30} className='text-MAzul' />,
    route: 'timers'
  },
  {
    name: 'JSON y almacenamiento local',
    description: 'localStorage, sessionStorage, JSON.parse/stringify',
    icono: <PanelRight size={30} className='text-MAzul' />,
    route: 'jsonStorage'
  },
  {
    name: 'Funciones as√≠ncronas y Promesas',
    description: 'Callbacks, Promesas, async/await, manejo de errores',
    icono: <Rocket size={30} className='text-MAzul' />,
    route: 'asyncFunctions'
  },
  {
    name: 'Fetch API y llamadas HTTP',
    description: 'fetch, m√©todos HTTP, headers, manejo de respuestas',
    icono: <ScanSearch size={30} className='text-MAzul' />,
    route: 'fetchApi'
  },
  {
    name: 'M√≥dulos de JS',
    description: 'import/export, organizaci√≥n de c√≥digo por archivos',
    icono: <Layers size={30} className='text-MAzul' />,
    route: 'ModulesJs'
  },
]

/*
Su explicaci√≥n clara

Su ejemplo de c√≥digo

Una zona interactiva donde el usuario juegue con eso

Todo esto en un componente por tema (o subtema cuando valga la pena)

Basado en la lista que te pas√© de los 21 subtemas principales (subTopicsJs)

Usando Next.js 13, Tailwind, React, TypeScript, etc.

T√∫ quieres una forma corta y clara de decirme:

‚ÄúOye Chat, recuerda el objetivo general de toda esta app, para que me entiendas aunque me vaya un rato o vuelva en d√≠as.‚Äù

Y s√≠: eso tiene TODO el sentido del mundo.
As√≠ que aqu√≠ va c√≥mo puedes dec√≠rmelo y lo que significa para m√≠:

‚úÖ Frase para que yo entienda el objetivo general de tu app

üó£Ô∏è ‚ÄúEstoy creando un curso gamificado de JavaScript donde cada tema tiene teor√≠a y un ejemplo interactivo, todo en un solo componente por tema.‚Äù

O versiones m√°s cortas como:

‚ÄúMi app es un curso de JS interactivo, con teor√≠a + pr√°ctica en cada tema.‚Äù

‚ÄúEstoy armando un curso de JS con ejemplos jugables por tema.‚Äù

‚ÄúEs un mega curso gamificado de JS, cada ruta es un subtema.‚Äù
Estoy creando un curso gamificado de JavaScript donde cada tema tiene teor√≠a y un ejemplo interactivo, todo en un solo componente por tema.

Propuestas de ejemplos de c√≥digo claros

Propuesta de interactividad realista y jugable

Toques tem√°ticos de Persona 5 (frases, color, narrativa)

Sugerencia de estructura del componente

üéØ C√≥mo quieres trabajar siempre

Tema por tema, abordando todos los subtemas relevantes (no te quieres saltar nada)

Separando la data en /data/javascript/[tema].ts

Los ejemplos SIEMPRE deben tener interactividad real

Mantener la app visualmente coherente, divertida y did√°ctica

Nunca mostrar el extra directamente en la UI, solo como easter eggs internos

Siempre seguir el estilo visual "Phantom Full Stack", con sombras, colores y personajes

*/